#!/usr/bin/env python3
"""
sanitize_table_summary.py

Reads results/table_summary.csv and corrects common scaling/type issues:
 - If success_pct > 100, try dividing by 100 once (handles earlier 100*100 bug).
 - Fills missing method column from config if possible.
 - Writes corrected CSV and regenerates results/table_summary_tex.tex (LaTeX snippet).
"""
import pandas as pd
from pathlib import Path
import numpy as np

IN = Path("results") / "table_summary.csv"
OUT = Path("results") / "table_summary_fixed.csv"
TEX = Path("results") / "table_summary_tex.tex"

def safe_fmt(x):
    if pd.isna(x): return "--"
    try: return f"{float(x):.2f}"
    except: return str(x)

if not IN.exists():
    print("[error] missing", IN)
    raise SystemExit(1)

df = pd.read_csv(IN)
# ensure column names
if 'success_pct' in df.columns:
    df['success_pct'] = pd.to_numeric(df['success_pct'], errors='coerce')
elif 'success_rate' in df.columns:
    df['success_pct'] = pd.to_numeric(df['success_rate'], errors='coerce') * 100
else:
    df['success_pct'] = pd.NA

# If any success_pct > 100, attempt to divide by 100 (once)
if (df['success_pct'].dropna() > 100).any():
    print("[warn] some success_pct > 100; dividing by 100 where reasonable")
    df.loc[df['success_pct'] > 100, 'success_pct'] = df.loc[df['success_pct'] > 100, 'success_pct'] / 100

# ensure mean_steps and std_steps numeric
for c in ('mean_steps','std_steps'):
    if c in df.columns:
        df[c] = pd.to_numeric(df[c], errors='coerce')

# ensure method column
if 'method' not in df.columns:
    df['method'] = df['config'].apply(lambda s: str(s).split('_')[0] if pd.notna(s) else 'unknown')

df.to_csv(OUT, index=False)
print("[ok] wrote fixed CSV:", OUT)

# now create LaTeX snippet
with open(TEX, 'w', encoding='utf8') as fh:
    fh.write("% generated by experiments/sanitize_table_summary.py\n")
    fh.write("\\begin{tabular}{lccc}\n\\toprule\nMethod & Success (\\%) & Mean Steps & Std. Dev. \\\\\n\\midrule\n")
    for _, r in df.iterrows():
        method = str(r.get('method','')).replace('_','\\_')
        succ = safe_fmt(r.get('success_pct', np.nan))
        mean = safe_fmt(r.get('mean_steps', np.nan))
        std  = safe_fmt(r.get('std_steps', np.nan))
        fh.write(f"{method} & {succ} & {mean} & {std} \\\\\n")
    fh.write("\\bottomrule\n\\end{tabular}\n")
print("[ok] wrote LaTeX snippet:", TEX)
