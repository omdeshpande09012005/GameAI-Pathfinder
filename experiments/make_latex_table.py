#!/usr/bin/env python3
"""
make_latex_table.py

Reads results/table_summary.csv and writes a LaTeX tabular snippet at results/table_summary_tex.tex

Column expectations (flexible): method, config, runs, success_pct or success_rate, mean_steps, std_steps
"""
import os
import pandas as pd
from pathlib import Path

CSV = Path("results") / "table_summary.csv"
OUT = Path("results") / "table_summary_tex.tex"

def safe_fmt(x, precision=2):
    if pd.isna(x):
        return "--"
    try:
        return f"{float(x):.{precision}f}"
    except Exception:
        return str(x)

def main():
    if not CSV.exists():
        print("[error] missing", CSV)
        return
    df = pd.read_csv(CSV)
    # try to normalize column names
    if 'success_pct' not in df.columns:
        if 'success_rate' in df.columns:
            df['success_pct'] = (df['success_rate'] * 100).round(2)
        else:
            df['success_pct'] = df.get('success_pct', "--")
    # ensure numeric columns present
    for col in ['mean_steps','std_steps']:
        if col not in df.columns:
            df[col] = df.get(col, pd.NA)
    # build latex
    header = "\\begin{tabular}{lccc}\n\\toprule\nMethod & Success (\\%) & Mean Steps & Std. Dev. \\\\\n\\midrule\n"
    lines = []
    for _, r in df.iterrows():
        method = str(r.get('method','')).replace('_','\\_')
        succ = safe_fmt(r.get('success_pct', pd.NA), precision=2)
        mean = safe_fmt(r.get('mean_steps', pd.NA), precision=2)
        std  = safe_fmt(r.get('std_steps', pd.NA), precision=2)
        lines.append(f"{method} & {succ} & {mean} & {std} \\\\")
    footer = "\\bottomrule\n\\end{tabular}\n"
    OUT.parent.mkdir(parents=True, exist_ok=True)
    with open(OUT, 'w', encoding='utf8') as f:
        f.write("% generated by experiments/make_latex_table.py\n")
        f.write(header)
        for L in lines: f.write(L + "\n")
        f.write(footer)
    print("[ok] wrote LaTeX table to", OUT)
    print("[info] also printed sample rows:")
    for L in lines[:10]:
        print("  ", L)

if __name__ == "__main__":
    main()
