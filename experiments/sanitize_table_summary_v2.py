#!/usr/bin/env python3
"""
sanitize_table_summary_v2.py

More robust sanitizer for results/table_summary.csv.
- Normalizes common column names
- Fixes success percentages > 100 by dividing by 100 when appropriate
- Writes results/table_summary_fixed.csv and results/table_summary_tex.tex
"""
import pandas as pd
from pathlib import Path
import numpy as np
import sys

IN = Path("results") / "table_summary.csv"
OUT = Path("results") / "table_summary_fixed.csv"
TEX = Path("results") / "table_summary_tex.tex"

if not IN.exists():
    print("[error] missing input:", IN)
    sys.exit(1)

df = pd.read_csv(IN)
print("[info] columns detected:", list(df.columns))

# Helper: find one of possible column names
def pick(cols):
    for c in cols:
        if c in df.columns:
            return c
    return None

# Possible column names
method_col = pick(['method','algo','algorithm','agent','approach'])
succ_pct_col = pick(['success_pct','success_rate','success'])
mean_col = pick(['mean_steps','mean','avg_steps','steps_mean','steps'])
std_col = pick(['std_steps','std','steps_std','stddev'])
config_col = pick(['config','cfg','configuration'])

# If success is a fraction (0..1) or boolean, normalize to percent
if succ_pct_col:
    df['__success_raw__'] = df[succ_pct_col]
else:
    df['__success_raw__'] = np.nan

# attempt numeric conversion for mean and std
if mean_col:
    df['__mean_raw__'] = pd.to_numeric(df[mean_col], errors='coerce')
else:
    df['__mean_raw__'] = np.nan

if std_col:
    df['__std_raw__'] = pd.to_numeric(df[std_col], errors='coerce')
else:
    df['__std_raw__'] = np.nan

# Normalize success to percentage in new column success_pct
def normalize_success(val):
    if pd.isna(val):
        return np.nan
    try:
        v = float(val)
    except:
        # if strings like "78%" strip %
        s = str(val).strip().replace('%','')
        try:
            v = float(s)
        except:
            return np.nan
    # if fraction (0..1)
    if 0 <= v <= 1:
        return v * 100.0
    # if >100 but looks like hundred times percent (e.g., 7800 or 10000), try scaling down
    if v > 100:
        # heuristics: if divisible by 100 -> divide by 100
        if abs(round(v/100) - v/100) < 1e-9:
            return v/100.0
        # if >1000, also try v/100
        if v > 1000:
            return v/100.0
    return v

df['success_pct'] = df['__success_raw__'].apply(normalize_success)

# In case success column was missing but method and mean exist, leave success_pct NaN.

# Set method/config fallbacks
if method_col:
    df['method_out'] = df[method_col].astype(str)
elif config_col:
    df['method_out'] = df[config_col].astype(str).apply(lambda s: s.split('_')[0] if pd.notna(s) else 'unknown')
else:
    # try to infer from index / filename field if present
    if 'name' in df.columns:
        df['method_out'] = df['name'].astype(str)
    else:
        df['method_out'] = 'unknown'

# Fill mean/std defaults if missing
df['mean_steps'] = df['__mean_raw__']
df['std_steps'] = df['__std_raw__']

# Replace inf/nan with placeholders or keep NaN
cols_to_write = ['method_out','success_pct','mean_steps','std_steps']
out_df = df[cols_to_write].rename(columns={'method_out':'method'})

# Save fixed CSV
out_df.to_csv(OUT, index=False, float_format='%.4f', na_rep='')
print("[ok] wrote fixed CSV:", OUT)

# Create LaTeX snippet
def safe_fmt(x):
    if pd.isna(x) or x == '':
        return "--"
    try:
        return f"{float(x):.2f}"
    except:
        return str(x)

with open(TEX, 'w', encoding='utf8') as fh:
    fh.write("% generated by experiments/sanitize_table_summary_v2.py\n")
    fh.write("\\begin{tabular}{lccc}\n\\toprule\nMethod & Success (\\%) & Mean Steps & Std. Dev. \\\\\n\\midrule\n")
    for _, r in out_df.iterrows():
        method = str(r['method']).replace('_','\\_')
        succ = safe_fmt(r['success_pct'])
        mean = safe_fmt(r['mean_steps'])
        std  = safe_fmt(r['std_steps'])
        fh.write(f"{method} & {succ} & {mean} & {std} \\\\\n")
    fh.write("\\bottomrule\n\\end{tabular}\n")
print("[ok] wrote LaTeX snippet:", TEX)
